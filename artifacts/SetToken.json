{
  "contractName": "SetToken",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "getUnits",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "componentCount",
      "outputs": [
        {
          "name": "componentsLength",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "naturalUnit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseApproval",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "quantity",
          "type": "uint256"
        },
        {
          "name": "excludedComponents",
          "type": "address[]"
        }
      ],
      "name": "partialRedeem",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "unredeemedComponents",
      "outputs": [
        {
          "name": "balance",
          "type": "uint256"
        },
        {
          "name": "isRedeemed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "componentsToRedeem",
          "type": "address[]"
        },
        {
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "name": "redeemExcluded",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getComponents",
      "outputs": [
        {
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "components",
      "outputs": [
        {
          "name": "address_",
          "type": "address"
        },
        {
          "name": "unit_",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "issue",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseApproval",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_components",
          "type": "address[]"
        },
        {
          "name": "_units",
          "type": "uint256[]"
        },
        {
          "name": "_naturalUnit",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_excludedComponents",
          "type": "address[]"
        }
      ],
      "name": "LogPartialRedemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_components",
          "type": "address[]"
        }
      ],
      "name": "LogRedeemExcluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "LogIssuance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "LogRedemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620025e6380380620025e68339810180604052620000379190810190620004ca565b60408051602081810180845260008084528451928301909452838252825184938493909290916012916200006f916003919062000300565b5081516200008590600490602085019062000300565b506005805460ff191660ff9290921691909117905550508551600010620000e3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000da90620006ff565b60405180910390fd5b845160001062000121576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000da9062000711565b84518651146200015f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000da9062000723565b600084116200016d57600080fd5b6006849055600092505b8451831015620002f45784838151811015156200019057fe5b60209081029091010151915060008211620001d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000da90620006d5565b8583815181101515620001e857fe5b602090810290910101519050600160a060020a038116151562000239576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000da90620006ed565b600160a060020a0381811660008181526008602090815260408083208054600160ff1990911681179091558151808301909252938152908101868152600780548086018255935290517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860029093029283018054600160a060020a031916919095161790935591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68990920191909155929092019162000177565b50505050505062000789565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200034357805160ff191683800117855562000373565b8280016001018555821562000373579182015b828111156200037357825182559160200191906001019062000356565b506200038192915062000385565b5090565b620003a291905b808211156200038157600081556001016200038c565b90565b6000620003b382516200077d565b9392505050565b6000601f82018313620003cc57600080fd5b8151620003e3620003dd826200075c565b62000735565b915081818352602084019350602081019050838560208402820111156200040957600080fd5b60005b83811015620004395781620004228882620003a5565b84525060209283019291909101906001016200040c565b5050505092915050565b6000601f820183136200045557600080fd5b815162000466620003dd826200075c565b915081818352602084019350602081019050838560208402820111156200048c57600080fd5b60005b83811015620004395781620004a58882620004bc565b84525060209283019291909101906001016200048f565b6000620003b38251620003a2565b600080600060608486031215620004e057600080fd5b83516001604060020a03811115620004f757600080fd5b6200050586828701620003ba565b93505060208401516001604060020a038111156200052257600080fd5b620005308682870162000443565b92505060406200054386828701620004bc565b9150509250925092565b602281527f556e6974206465636c61726174696f6e73206d757374206265206e6f6e2d7a6560208201527f726f000000000000000000000000000000000000000000000000000000000000604082015260600190565b602581527f436f6d706f6e656e7473206d7573742068617665206e6f6e2d7a65726f20616460208201527f6472657373000000000000000000000000000000000000000000000000000000604082015260600190565b602981527f436f6d706f6e656e74206c656e677468206e6565647320746f2062652067726560208201527f6174207468616e20300000000000000000000000000000000000000000000000604082015260600190565b601c81527f556e697473206d7573742062652067726561746572207468616e203000000000602082015260400190565b602b81527f436f6d706f6e656e7420616e6420756e6974206c656e67746873206d7573742060208201527f6265207468652073616d65000000000000000000000000000000000000000000604082015260600190565b60208082528101620006e7816200054d565b92915050565b60208082528101620006e781620005a3565b60208082528101620006e781620005f9565b60208082528101620006e7816200064f565b60208082528101620006e7816200067f565b6040518181016001604060020a03811182821017156200075457600080fd5b604052919050565b60006001604060020a038211156200077357600080fd5b5060209081020190565b600160a060020a031690565b611e4d80620007996000396000f30060806040526004361061011c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663027aa9f5811461012157806306fdde031461014c578063095ea7b31461016e57806318160ddd1461019b5780631fe26e9d146101bd57806323b872dd146101d2578063313ce567146101f257806342a7cfd514610214578063661884631461022957806370a0823114610249578063835a749d14610269578063873fb3f614610289578063899967b7146102b757806395d89b41146102d757806399d50d5d146102ec578063a9059cbb1461030e578063c5d574fe1461032e578063cc872b661461035c578063d73dd6231461037c578063db006a751461039c578063dd62ed3e146103bc575b600080fd5b34801561012d57600080fd5b506101366103dc565b6040516101439190611c9b565b60405180910390f35b34801561015857600080fd5b50610161610468565b6040516101439190611cba565b34801561017a57600080fd5b5061018e610189366004611870565b6104f6565b6040516101439190611cac565b3480156101a757600080fd5b506101b0610566565b6040516101439190611d2b565b3480156101c957600080fd5b506101b061056c565b3480156101de57600080fd5b5061018e6101ed366004611823565b610572565b3480156101fe57600080fd5b506102076105bf565b6040516101439190611d54565b34801561022057600080fd5b506101b06105c8565b34801561023557600080fd5b5061018e610244366004611870565b6105ce565b34801561025557600080fd5b506101b06102643660046117cb565b6106ce565b34801561027557600080fd5b5061018e61028436600461193b565b6106e9565b34801561029557600080fd5b506102a96102a43660046117e9565b610b34565b604051610143929190611d39565b3480156102c357600080fd5b5061018e6102d23660046118a0565b610b5b565b3480156102e357600080fd5b50610161610d75565b3480156102f857600080fd5b50610301610dd0565b6040516101439190611c8a565b34801561031a57600080fd5b5061018e610329366004611870565b610e6e565b34801561033a57600080fd5b5061034e61034936600461191d565b610eb9565b604051610143929190611c6f565b34801561036857600080fd5b5061018e61037736600461191d565b610eef565b34801561038857600080fd5b5061018e610397366004611870565b611084565b3480156103a857600080fd5b5061018e6103b736600461191d565b611119565b3480156103c857600080fd5b506101b06103d73660046117e9565b6112ea565b6060806000600780549050604051908082528060200260200182016040528015610410578160200160208202803883390190505b509150600090505b60075481101561046257600780548290811061043057fe5b906000526020600020906002020160010154828281518110151561045057fe5b60209081029091010152600101610418565b50919050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b600160a060020a0333811660008181526002602090815260408083209487168084529490915280822085905551909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610554908690611d2b565b60405180910390a35060015b92915050565b60015490565b60075490565b600082600160a060020a038116151561058a57600080fd5b30600160a060020a031681600160a060020a0316141515156105ab57600080fd5b6105b6858585611315565b95945050505050565b60055460ff1681565b60065481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561062b57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610662565b61063b818463ffffffff61149b16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a03338116600081815260026020908152604080832094891680845294909152908190205490517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916106ba91611d2b565b60405180910390a3600191505b5092915050565b600160a060020a031660009081526020819052604090205490565b60008060008060008060008060008a6006548181151561070557fe5b061561071057600080fd5b8b6000811161071e57600080fd5b600160a060020a0333166000908152602081905260409020548d908111156107645760405160e560020a62461bcd02815260040161075b90611ccb565b60405180910390fd5b6007548d51106107895760405160e560020a62461bcd02815260040161075b90611cdb565b8c516000106107ad5760405160e560020a62461bcd02815260040161075b90611d1b565b6107b68e6114ad565b60009a505b6007548b1015610a7857600099506107f360078c8154811015156107db57fe5b9060005260206000209060020201600101548f611508565b9850600097505b8c518810156109a5578c8881518110151561081157fe5b6020908102909101810151600160a060020a0381166000908152600890925260409091205490975060ff16151561084457fe5b86600160a060020a031660078c81548110151561085d57fe5b6000918252602090912060029091020154600160a060020a0316141561099a576009600060078d81548110151561089057fe5b60009182526020808320600290920290910154600160a060020a03908116845283820194909452604092830182203390941682529290925290206001015460ff16955085156108db57fe5b886009600060078e8154811015156108ef57fe5b60009182526020808320600290920290910154600160a060020a039081168452838201949094526040928301822033909416825292909252812080549092019091556007805460019260099290918f90811061094757fe5b6000918252602080832060029290920290910154600160a060020a03908116845283820194909452604092830182203390941682529290925290206001908101805460ff19169215159290921790915599505b6001909701966107fa565b891515610a6d57600780548c9081106109ba57fe5b60009182526020909120600290910201546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063a9059cbb90610a139033908d90600401611c6f565b602060405180830381600087803b158015610a2d57600080fd5b505af1158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a6591908101906118ff565b1515610a6d57fe5b6001909a01996107bb565b600094505b8c51851015610ade578c85815181101515610a9457fe5b6020908102909101810151600160a060020a038082166000908152600984526040808220339093168252919093529091206001908101805460ff1916905595909501949350610a7d565b8d33600160a060020a03167f5496ad420584a641ee395874a8f10b487477a3f556afd77fe06fb3d0f1e712898f604051610b189190611c8a565b60405180910390a35060019d9c50505050505050505050505050565b60096020908152600092835260408084209091529082529020805460019091015460ff1682565b6000806000806000808651111515610b885760405160e560020a62461bcd02815260040161075b90611ceb565b8651600010610bac5760405160e560020a62461bcd02815260040161075b90611d0b565b8651865114610bd05760405160e560020a62461bcd02815260040161075b90611cfb565b600093505b8551841015610d25578684815181101515610bec57fe5b9060200190602002015192508584815181101515610c0657fe5b6020908102909101810151600160a060020a0380861660009081526009845260408082203390931682529190935290912054909250905081811015610c4a57600080fd5b610c5a818363ffffffff61149b16565b600160a060020a038085166000818152600960209081526040808320339586168452909152908190209390935591517fa9059cbb00000000000000000000000000000000000000000000000000000000815263a9059cbb91610cc0918690600401611c6f565b602060405180830381600087803b158015610cda57600080fd5b505af1158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d1291908101906118ff565b1515610d1a57fe5b600190930192610bd5565b33600160a060020a03167f1b0302ab65ed6c4d7fe0c883f0ec43c2b70b2a3a0bcb6d5ce2e7042ae3ec501e88604051610d5e9190611c8a565b60405180910390a2600194505b5050505092915050565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ee5780601f106104c3576101008083540402835291602001916104ee565b6060806000600780549050604051908082528060200260200182016040528015610e04578160200160208202803883390190505b509150600090505b600754811015610462576007805482908110610e2457fe5b60009182526020909120600290910201548251600160a060020a0390911690839083908110610e4f57fe5b600160a060020a03909216602092830290910190910152600101610e0c565b600082600160a060020a0381161515610e8657600080fd5b30600160a060020a031681600160a060020a031614151515610ea757600080fd5b610eb1848461152f565b949350505050565b6007805482908110610ec757fe5b600091825260209091206002909102018054600190910154600160a060020a03909116915082565b60008060008060008560065481811515610f0557fe5b0615610f1057600080fd5b8660008111610f1e57600080fd5b600095505b600754861015611037576007805487908110610f3b57fe5b600091825260209091206002909102015460078054600160a060020a0390921696509087908110610f6857fe5b9060005260206000209060020201600101549350610f868489611508565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152909350600160a060020a038616906323b872dd90610fd290339030908890600401611c47565b602060405180830381600087803b158015610fec57600080fd5b505af1158015611000573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061102491908101906118ff565b151561102c57fe5b600190950194610f23565b6110408861161c565b6040518890600160a060020a033316907ffbd21f8762dc0c4fc0dbc03a2f816a0a617102a0f9d1908bbc09d377a0b9c6ab90600090a3506001979650505050505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546110bc908363ffffffff61167116565b600160a060020a033381166000818152600260209081526040808320948916808452949091529081902084905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259161055491611d2b565b6000806000806000856006548181151561112f57fe5b061561113a57600080fd5b600160a060020a03331660009081526020819052604090205487908111156111775760405160e560020a62461bcd02815260040161075b90611ccb565b876000811161118557600080fd5b61118e896114ad565b600096505b6007548710156112a55760078054889081106111ab57fe5b600091825260209091206002909102015460078054600160a060020a03909216975090889081106111d857fe5b90600052602060002090600202016001015494506111f6858a611508565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152909450600160a060020a0387169063a9059cbb906112409033908890600401611c6f565b602060405180830381600087803b15801561125a57600080fd5b505af115801561126e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061129291908101906118ff565b151561129a57fe5b600190960195611193565b6040518990600160a060020a033316907f2de3ebe1bb56079998f2617612ba527a2690a100757600dfc0d7253c808b742990600090a350600198975050505050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000600160a060020a038316151561132c57600080fd5b600160a060020a03841660009081526020819052604090205482111561135157600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561138457600080fd5b600160a060020a0384166000908152602081905260409020546113ad908363ffffffff61149b16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546113e2908363ffffffff61167116565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054611428908363ffffffff61149b16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355915190851691907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611488908690611d2b565b60405180910390a35060015b9392505050565b6000828211156114a757fe5b50900390565b600160a060020a0333166000908152602081905260409020546114d6908263ffffffff61149b16565b600160a060020a033316600090815260208190526040902055600154611502908263ffffffff61149b16565b60015550565b6000611494836115236006548561168090919063ffffffff16565b9063ffffffff61169716565b6000600160a060020a038316151561154657600080fd5b600160a060020a03331660009081526020819052604090205482111561156b57600080fd5b600160a060020a033316600090815260208190526040902054611594908363ffffffff61149b16565b600160a060020a0333811660009081526020819052604080822093909355908516815220546115c9908363ffffffff61167116565b600160a060020a038085166000818152602081905260409081902093909355915133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610554908690611d2b565b600160a060020a033316600090815260208190526040902054611645908263ffffffff61167116565b600160a060020a033316600090815260208190526040902055600154611502908263ffffffff61167116565b60008282018381101561149457fe5b600080828481151561168e57fe5b04949350505050565b6000808315156116aa57600091506106c7565b508282028284828115156116ba57fe5b041461149457fe5b60006114948235611db4565b6000601f820183136116df57600080fd5b81356116f26116ed82611d89565b611d62565b9150818183526020840193506020810190508385602084028201111561171757600080fd5b60005b83811015610d6b578161172d88826116c2565b845250602092830192919091019060010161171a565b6000601f8201831361175457600080fd5b81356117626116ed82611d89565b9150818183526020840193506020810190508385602084028201111561178757600080fd5b60005b83811015610d6b578161179d88826117bf565b845250602092830192919091019060010161178a565b60006114948251611dc0565b60006114948235611dc5565b6000602082840312156117dd57600080fd5b6000610eb184846116c2565b600080604083850312156117fc57600080fd5b600061180885856116c2565b9250506020611819858286016116c2565b9150509250929050565b60008060006060848603121561183857600080fd5b600061184486866116c2565b9350506020611855868287016116c2565b9250506040611866868287016117bf565b9150509250925092565b6000806040838503121561188357600080fd5b600061188f85856116c2565b9250506020611819858286016117bf565b600080604083850312156118b357600080fd5b823567ffffffffffffffff8111156118ca57600080fd5b6118d6858286016116ce565b925050602083013567ffffffffffffffff8111156118f357600080fd5b61181985828601611743565b60006020828403121561191157600080fd5b6000610eb184846117b3565b60006020828403121561192f57600080fd5b6000610eb184846117bf565b6000806040838503121561194e57600080fd5b600061195a85856117bf565b925050602083013567ffffffffffffffff81111561197757600080fd5b611819858286016116ce565b61198c81611db4565b82525050565b600061199d82611db0565b8084526020840193506119af83611daa565b60005b828110156119df576119c5868351611983565b6119ce82611daa565b6020969096019591506001016119b2565b5093949350505050565b60006119f482611db0565b808452602084019350611a0683611daa565b60005b828110156119df57611a1c868351611c35565b611a2582611daa565b602096909601959150600101611a09565b61198c81611dc0565b61198c81611dce565b6000611a5382611db0565b808452611a67816020860160208601611dd9565b611a7081611e09565b9093016020019392505050565b602581527f5573657220646f6573206e6f7420686176652073756666696369656e7420626160208201527f6c616e6365000000000000000000000000000000000000000000000000000000604082015260600190565b603c81527f4578636c7564656420636f6d706f6e656e74206c656e677468206d757374206260208201527f65206c657373207468616e20636f6d706f6e656e74206c656e67746800000000604082015260600190565b601b81527f5175616e746974696573206d757374206265206e6f6e2d7a65726f0000000000602082015260400190565b601881527f4c656e67746873206d757374206265207468652073616d650000000000000000602082015260400190565b602481527f436f6d706f6e656e74732072656465656d6564206d757374206265206e6f6e2d60208201527f7a65726f00000000000000000000000000000000000000000000000000000000604082015260600190565b602481527f4578636c7564656420636f6d706f6e656e7473206d757374206265206e6f6e2d60208201527f7a65726f00000000000000000000000000000000000000000000000000000000604082015260600190565b61198c81611dc5565b61198c81611dc8565b60608101611c558286611983565b611c626020830185611a3f565b610eb16040830184611c35565b60408101611c7d8285611983565b6114946020830184611c35565b602080825281016114948184611992565b6020808252810161149481846119e9565b602081016105608284611a36565b602080825281016114948184611a48565b6020808252810161056081611a7d565b6020808252810161056081611ad3565b6020808252810161056081611b29565b6020808252810161056081611b59565b6020808252810161056081611b89565b6020808252810161056081611bdf565b602081016105608284611c35565b60408101611d478285611c35565b6114946020830184611a36565b602081016105608284611c3e565b60405181810167ffffffffffffffff81118282101715611d8157600080fd5b604052919050565b600067ffffffffffffffff821115611da057600080fd5b5060209081020190565b60200190565b5190565b600160a060020a031690565b151590565b90565b60ff1690565b600061056082611db4565b60005b83811015611df4578181015183820152602001611ddc565b83811115611e03576000848401525b50505050565b601f01601f1916905600a265627a7a7230582086d2f9355479e1c5ba5d57a6cfc964e59979718c03abcb98f31e9ac7ddde156b6c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x60806040526004361061011c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663027aa9f5811461012157806306fdde031461014c578063095ea7b31461016e57806318160ddd1461019b5780631fe26e9d146101bd57806323b872dd146101d2578063313ce567146101f257806342a7cfd514610214578063661884631461022957806370a0823114610249578063835a749d14610269578063873fb3f614610289578063899967b7146102b757806395d89b41146102d757806399d50d5d146102ec578063a9059cbb1461030e578063c5d574fe1461032e578063cc872b661461035c578063d73dd6231461037c578063db006a751461039c578063dd62ed3e146103bc575b600080fd5b34801561012d57600080fd5b506101366103dc565b6040516101439190611c9b565b60405180910390f35b34801561015857600080fd5b50610161610468565b6040516101439190611cba565b34801561017a57600080fd5b5061018e610189366004611870565b6104f6565b6040516101439190611cac565b3480156101a757600080fd5b506101b0610566565b6040516101439190611d2b565b3480156101c957600080fd5b506101b061056c565b3480156101de57600080fd5b5061018e6101ed366004611823565b610572565b3480156101fe57600080fd5b506102076105bf565b6040516101439190611d54565b34801561022057600080fd5b506101b06105c8565b34801561023557600080fd5b5061018e610244366004611870565b6105ce565b34801561025557600080fd5b506101b06102643660046117cb565b6106ce565b34801561027557600080fd5b5061018e61028436600461193b565b6106e9565b34801561029557600080fd5b506102a96102a43660046117e9565b610b34565b604051610143929190611d39565b3480156102c357600080fd5b5061018e6102d23660046118a0565b610b5b565b3480156102e357600080fd5b50610161610d75565b3480156102f857600080fd5b50610301610dd0565b6040516101439190611c8a565b34801561031a57600080fd5b5061018e610329366004611870565b610e6e565b34801561033a57600080fd5b5061034e61034936600461191d565b610eb9565b604051610143929190611c6f565b34801561036857600080fd5b5061018e61037736600461191d565b610eef565b34801561038857600080fd5b5061018e610397366004611870565b611084565b3480156103a857600080fd5b5061018e6103b736600461191d565b611119565b3480156103c857600080fd5b506101b06103d73660046117e9565b6112ea565b6060806000600780549050604051908082528060200260200182016040528015610410578160200160208202803883390190505b509150600090505b60075481101561046257600780548290811061043057fe5b906000526020600020906002020160010154828281518110151561045057fe5b60209081029091010152600101610418565b50919050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b600160a060020a0333811660008181526002602090815260408083209487168084529490915280822085905551909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610554908690611d2b565b60405180910390a35060015b92915050565b60015490565b60075490565b600082600160a060020a038116151561058a57600080fd5b30600160a060020a031681600160a060020a0316141515156105ab57600080fd5b6105b6858585611315565b95945050505050565b60055460ff1681565b60065481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561062b57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610662565b61063b818463ffffffff61149b16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a03338116600081815260026020908152604080832094891680845294909152908190205490517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916106ba91611d2b565b60405180910390a3600191505b5092915050565b600160a060020a031660009081526020819052604090205490565b60008060008060008060008060008a6006548181151561070557fe5b061561071057600080fd5b8b6000811161071e57600080fd5b600160a060020a0333166000908152602081905260409020548d908111156107645760405160e560020a62461bcd02815260040161075b90611ccb565b60405180910390fd5b6007548d51106107895760405160e560020a62461bcd02815260040161075b90611cdb565b8c516000106107ad5760405160e560020a62461bcd02815260040161075b90611d1b565b6107b68e6114ad565b60009a505b6007548b1015610a7857600099506107f360078c8154811015156107db57fe5b9060005260206000209060020201600101548f611508565b9850600097505b8c518810156109a5578c8881518110151561081157fe5b6020908102909101810151600160a060020a0381166000908152600890925260409091205490975060ff16151561084457fe5b86600160a060020a031660078c81548110151561085d57fe5b6000918252602090912060029091020154600160a060020a0316141561099a576009600060078d81548110151561089057fe5b60009182526020808320600290920290910154600160a060020a03908116845283820194909452604092830182203390941682529290925290206001015460ff16955085156108db57fe5b886009600060078e8154811015156108ef57fe5b60009182526020808320600290920290910154600160a060020a039081168452838201949094526040928301822033909416825292909252812080549092019091556007805460019260099290918f90811061094757fe5b6000918252602080832060029290920290910154600160a060020a03908116845283820194909452604092830182203390941682529290925290206001908101805460ff19169215159290921790915599505b6001909701966107fa565b891515610a6d57600780548c9081106109ba57fe5b60009182526020909120600290910201546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063a9059cbb90610a139033908d90600401611c6f565b602060405180830381600087803b158015610a2d57600080fd5b505af1158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a6591908101906118ff565b1515610a6d57fe5b6001909a01996107bb565b600094505b8c51851015610ade578c85815181101515610a9457fe5b6020908102909101810151600160a060020a038082166000908152600984526040808220339093168252919093529091206001908101805460ff1916905595909501949350610a7d565b8d33600160a060020a03167f5496ad420584a641ee395874a8f10b487477a3f556afd77fe06fb3d0f1e712898f604051610b189190611c8a565b60405180910390a35060019d9c50505050505050505050505050565b60096020908152600092835260408084209091529082529020805460019091015460ff1682565b6000806000806000808651111515610b885760405160e560020a62461bcd02815260040161075b90611ceb565b8651600010610bac5760405160e560020a62461bcd02815260040161075b90611d0b565b8651865114610bd05760405160e560020a62461bcd02815260040161075b90611cfb565b600093505b8551841015610d25578684815181101515610bec57fe5b9060200190602002015192508584815181101515610c0657fe5b6020908102909101810151600160a060020a0380861660009081526009845260408082203390931682529190935290912054909250905081811015610c4a57600080fd5b610c5a818363ffffffff61149b16565b600160a060020a038085166000818152600960209081526040808320339586168452909152908190209390935591517fa9059cbb00000000000000000000000000000000000000000000000000000000815263a9059cbb91610cc0918690600401611c6f565b602060405180830381600087803b158015610cda57600080fd5b505af1158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d1291908101906118ff565b1515610d1a57fe5b600190930192610bd5565b33600160a060020a03167f1b0302ab65ed6c4d7fe0c883f0ec43c2b70b2a3a0bcb6d5ce2e7042ae3ec501e88604051610d5e9190611c8a565b60405180910390a2600194505b5050505092915050565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ee5780601f106104c3576101008083540402835291602001916104ee565b6060806000600780549050604051908082528060200260200182016040528015610e04578160200160208202803883390190505b509150600090505b600754811015610462576007805482908110610e2457fe5b60009182526020909120600290910201548251600160a060020a0390911690839083908110610e4f57fe5b600160a060020a03909216602092830290910190910152600101610e0c565b600082600160a060020a0381161515610e8657600080fd5b30600160a060020a031681600160a060020a031614151515610ea757600080fd5b610eb1848461152f565b949350505050565b6007805482908110610ec757fe5b600091825260209091206002909102018054600190910154600160a060020a03909116915082565b60008060008060008560065481811515610f0557fe5b0615610f1057600080fd5b8660008111610f1e57600080fd5b600095505b600754861015611037576007805487908110610f3b57fe5b600091825260209091206002909102015460078054600160a060020a0390921696509087908110610f6857fe5b9060005260206000209060020201600101549350610f868489611508565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152909350600160a060020a038616906323b872dd90610fd290339030908890600401611c47565b602060405180830381600087803b158015610fec57600080fd5b505af1158015611000573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061102491908101906118ff565b151561102c57fe5b600190950194610f23565b6110408861161c565b6040518890600160a060020a033316907ffbd21f8762dc0c4fc0dbc03a2f816a0a617102a0f9d1908bbc09d377a0b9c6ab90600090a3506001979650505050505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546110bc908363ffffffff61167116565b600160a060020a033381166000818152600260209081526040808320948916808452949091529081902084905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259161055491611d2b565b6000806000806000856006548181151561112f57fe5b061561113a57600080fd5b600160a060020a03331660009081526020819052604090205487908111156111775760405160e560020a62461bcd02815260040161075b90611ccb565b876000811161118557600080fd5b61118e896114ad565b600096505b6007548710156112a55760078054889081106111ab57fe5b600091825260209091206002909102015460078054600160a060020a03909216975090889081106111d857fe5b90600052602060002090600202016001015494506111f6858a611508565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152909450600160a060020a0387169063a9059cbb906112409033908890600401611c6f565b602060405180830381600087803b15801561125a57600080fd5b505af115801561126e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061129291908101906118ff565b151561129a57fe5b600190960195611193565b6040518990600160a060020a033316907f2de3ebe1bb56079998f2617612ba527a2690a100757600dfc0d7253c808b742990600090a350600198975050505050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000600160a060020a038316151561132c57600080fd5b600160a060020a03841660009081526020819052604090205482111561135157600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561138457600080fd5b600160a060020a0384166000908152602081905260409020546113ad908363ffffffff61149b16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546113e2908363ffffffff61167116565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054611428908363ffffffff61149b16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355915190851691907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611488908690611d2b565b60405180910390a35060015b9392505050565b6000828211156114a757fe5b50900390565b600160a060020a0333166000908152602081905260409020546114d6908263ffffffff61149b16565b600160a060020a033316600090815260208190526040902055600154611502908263ffffffff61149b16565b60015550565b6000611494836115236006548561168090919063ffffffff16565b9063ffffffff61169716565b6000600160a060020a038316151561154657600080fd5b600160a060020a03331660009081526020819052604090205482111561156b57600080fd5b600160a060020a033316600090815260208190526040902054611594908363ffffffff61149b16565b600160a060020a0333811660009081526020819052604080822093909355908516815220546115c9908363ffffffff61167116565b600160a060020a038085166000818152602081905260409081902093909355915133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610554908690611d2b565b600160a060020a033316600090815260208190526040902054611645908263ffffffff61167116565b600160a060020a033316600090815260208190526040902055600154611502908263ffffffff61167116565b60008282018381101561149457fe5b600080828481151561168e57fe5b04949350505050565b6000808315156116aa57600091506106c7565b508282028284828115156116ba57fe5b041461149457fe5b60006114948235611db4565b6000601f820183136116df57600080fd5b81356116f26116ed82611d89565b611d62565b9150818183526020840193506020810190508385602084028201111561171757600080fd5b60005b83811015610d6b578161172d88826116c2565b845250602092830192919091019060010161171a565b6000601f8201831361175457600080fd5b81356117626116ed82611d89565b9150818183526020840193506020810190508385602084028201111561178757600080fd5b60005b83811015610d6b578161179d88826117bf565b845250602092830192919091019060010161178a565b60006114948251611dc0565b60006114948235611dc5565b6000602082840312156117dd57600080fd5b6000610eb184846116c2565b600080604083850312156117fc57600080fd5b600061180885856116c2565b9250506020611819858286016116c2565b9150509250929050565b60008060006060848603121561183857600080fd5b600061184486866116c2565b9350506020611855868287016116c2565b9250506040611866868287016117bf565b9150509250925092565b6000806040838503121561188357600080fd5b600061188f85856116c2565b9250506020611819858286016117bf565b600080604083850312156118b357600080fd5b823567ffffffffffffffff8111156118ca57600080fd5b6118d6858286016116ce565b925050602083013567ffffffffffffffff8111156118f357600080fd5b61181985828601611743565b60006020828403121561191157600080fd5b6000610eb184846117b3565b60006020828403121561192f57600080fd5b6000610eb184846117bf565b6000806040838503121561194e57600080fd5b600061195a85856117bf565b925050602083013567ffffffffffffffff81111561197757600080fd5b611819858286016116ce565b61198c81611db4565b82525050565b600061199d82611db0565b8084526020840193506119af83611daa565b60005b828110156119df576119c5868351611983565b6119ce82611daa565b6020969096019591506001016119b2565b5093949350505050565b60006119f482611db0565b808452602084019350611a0683611daa565b60005b828110156119df57611a1c868351611c35565b611a2582611daa565b602096909601959150600101611a09565b61198c81611dc0565b61198c81611dce565b6000611a5382611db0565b808452611a67816020860160208601611dd9565b611a7081611e09565b9093016020019392505050565b602581527f5573657220646f6573206e6f7420686176652073756666696369656e7420626160208201527f6c616e6365000000000000000000000000000000000000000000000000000000604082015260600190565b603c81527f4578636c7564656420636f6d706f6e656e74206c656e677468206d757374206260208201527f65206c657373207468616e20636f6d706f6e656e74206c656e67746800000000604082015260600190565b601b81527f5175616e746974696573206d757374206265206e6f6e2d7a65726f0000000000602082015260400190565b601881527f4c656e67746873206d757374206265207468652073616d650000000000000000602082015260400190565b602481527f436f6d706f6e656e74732072656465656d6564206d757374206265206e6f6e2d60208201527f7a65726f00000000000000000000000000000000000000000000000000000000604082015260600190565b602481527f4578636c7564656420636f6d706f6e656e7473206d757374206265206e6f6e2d60208201527f7a65726f00000000000000000000000000000000000000000000000000000000604082015260600190565b61198c81611dc5565b61198c81611dc8565b60608101611c558286611983565b611c626020830185611a3f565b610eb16040830184611c35565b60408101611c7d8285611983565b6114946020830184611c35565b602080825281016114948184611992565b6020808252810161149481846119e9565b602081016105608284611a36565b602080825281016114948184611a48565b6020808252810161056081611a7d565b6020808252810161056081611ad3565b6020808252810161056081611b29565b6020808252810161056081611b59565b6020808252810161056081611b89565b6020808252810161056081611bdf565b602081016105608284611c35565b60408101611d478285611c35565b6114946020830184611a36565b602081016105608284611c3e565b60405181810167ffffffffffffffff81118282101715611d8157600080fd5b604052919050565b600067ffffffffffffffff821115611da057600080fd5b5060209081020190565b60200190565b5190565b600160a060020a031690565b151590565b90565b60ff1690565b600061056082611db4565b60005b83811015611df4578181015183820152602001611ddc565b83811115611e03576000848401525b50505050565b601f01601f1916905600a265627a7a7230582086d2f9355479e1c5ba5d57a6cfc964e59979718c03abcb98f31e9ac7ddde156b6c6578706572696d656e74616cf50037",
  "sourceMap": "418:11889:1:-;;;2606:1399;8:9:-1;5:2;;;30:1;27;20:12;5:2;2606:1399:1;;;;;;;;;;;;;;;;;;;;;;;;158:148:13;;;;;;;;;;3386:6:1;158:148:13;;;;;;;;;;;;;;241:12;;3386:6:1;;;;158:148:13;;;;476:2:1;;241:12:13;;:4;;158:148;241:12;:::i;:::-;-1:-1:-1;259:16:13;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;281:8:13;:20;;-1:-1:-1;;281:20:13;;;;;;;;;;;;-1:-1:-1;;2735:18:1;;-1:-1:-1;;2727:76:1;;;;;;;;;;;;;;;;;;;;;;2857:13;;2873:1;-1:-1:-1;2849:58:1;;;;;;;;;;;;;;3007:13;;2985:18;;:35;2977:91;;;;;;;;;;;;;;3098:1;3083:16;;3075:25;;;;;;3106:11;:26;;;3395:1;;-1:-1:-1;3381:620:1;3402:6;:13;3398:1;:17;3381:620;;;3526:6;3533:1;3526:9;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3566:1:1;3551:16;;3543:63;;;;;;;;;;;;;;3689:11;3701:1;3689:14;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3719:30:1;;;;3711:80;;;;;;;;;;;;;;-1:-1:-1;;;;;3846:29:1;;;;;;;:11;:29;;;;;;;;:36;;3878:4;-1:-1:-1;;3846:36:1;;;;;;;;3907:86;;;;;;;;;;;;;;;;;3891:10;27::-1;;23:18;;;45:23;;3891:103:1;;;;;;;;;;;;;;-1:-1:-1;;;;;;3891:103:1;;;;;;;;;;;;;;;;;;;3417:3;;;;;3381:620;;;2606:1399;;;;;;418:11889;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;418:11889:1;;;-1:-1:-1;418:11889:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;152:722;;273:4;261:17;;257:27;-1:-1;247:2;;298:1;295;288:12;247:2;328:6;322:13;350:80;365:64;422:6;365:64;;;350:80;;;341:89;;447:5;472:6;465:5;458:21;502:4;494:6;490:17;480:27;;524:4;519:3;515:14;508:21;;577:6;624:3;616:4;608:6;604:17;599:3;595:27;592:36;589:2;;;641:1;638;631:12;589:2;666:1;651:217;676:6;673:1;670:13;651:217;;;734:3;756:48;800:3;788:10;756:48;;;744:61;;-1:-1;828:4;819:14;;;;847;;;;;698:1;691:9;651:217;;;655:14;240:634;;;;;;;;900:722;;1021:4;1009:17;;1005:27;-1:-1;995:2;;1046:1;1043;1036:12;995:2;1076:6;1070:13;1098:80;1113:64;1170:6;1113:64;;1098:80;1089:89;;1195:5;1220:6;1213:5;1206:21;1250:4;1242:6;1238:17;1228:27;;1272:4;1267:3;1263:14;1256:21;;1325:6;1372:3;1364:4;1356:6;1352:17;1347:3;1343:27;1340:36;1337:2;;;1389:1;1386;1379:12;1337:2;1414:1;1399:217;1424:6;1421:1;1418:13;1399:217;;;1482:3;1504:48;1548:3;1536:10;1504:48;;;1492:61;;-1:-1;1576:4;1567:14;;;;1595;;;;;1446:1;1439:9;1399:217;;1630:122;;1708:39;1739:6;1733:13;1708:39;;1759:793;;;;1958:2;1946:9;1937:7;1933:23;1929:32;1926:2;;;1974:1;1971;1964:12;1926:2;2009:24;;-1:-1;;;;;2042:30;;2039:2;;;2085:1;2082;2075:12;2039:2;2105:89;2186:7;2177:6;2166:9;2162:22;2105:89;;;2095:99;;1988:212;2252:2;2241:9;2237:18;2231:25;-1:-1;;;;;2268:6;2265:30;2262:2;;;2308:1;2305;2298:12;2262:2;2328:89;2409:7;2400:6;2389:9;2385:22;2328:89;;;2318:99;;2210:213;2454:2;2472:64;2528:7;2519:6;2508:9;2504:22;2472:64;;;2462:74;;2433:109;1920:632;;;;;;2560:397;2715:2;2703:15;;2752:66;2747:2;2738:12;;2731:88;2853:66;2848:2;2839:12;;2832:88;2948:2;2939:12;;2696:261;2966:397;3121:2;3109:15;;3158:66;3153:2;3144:12;;3137:88;3259:66;3254:2;3245:12;;3238:88;3354:2;3345:12;;3102:261;3372:397;3527:2;3515:15;;3564:66;3559:2;3550:12;;3543:88;3665:66;3660:2;3651:12;;3644:88;3760:2;3751:12;;3508:261;3778:296;3933:2;3921:15;;3970:66;3965:2;3956:12;;3949:88;4065:2;4056:12;;3914:160;4083:397;4238:2;4226:15;;4275:66;4270:2;4261:12;;4254:88;4376:66;4371:2;4362:12;;4355:88;4471:2;4462:12;;4219:261;4488:387;4669:2;4683:47;;;4654:18;;4744:121;4654:18;4744:121;;;4736:129;4640:235;-1:-1;;4640:235;4882:387;5063:2;5077:47;;;5048:18;;5138:121;5048:18;5138:121;;5276:387;5457:2;5471:47;;;5442:18;;5532:121;5442:18;5532:121;;5670:387;5851:2;5865:47;;;5836:18;;5926:121;5836:18;5926:121;;6064:387;6245:2;6259:47;;;6230:18;;6320:121;6230:18;6320:121;;6458:256;6520:2;6514:9;6546:17;;;-1:-1;;;;;6606:34;;6642:22;;;6603:62;6600:2;;;6678:1;6675;6668:12;6600:2;6694;6687:22;6498:216;;-1:-1;6498:216;6721:258;;-1:-1;;;;;6872:6;6869:30;6866:2;;;6912:1;6909;6902:12;6866:2;-1:-1;6941:4;6929:17;;;6959:15;;6803:176;7251:128;-1:-1;;;;;7320:54;;7303:76;;418:11889:1;;;;;;",
  "deployedSourceMap": "418:11889:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4086:8;;;10894:225;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10894:225:1;;;;;;;;;;;;;;;;;;;;86:18:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;86:18:13;;;;;;;;;;;;1798:183:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1798:183:17;;;;;;;;;;;;;;;;;371:83:12;;8:9:-1;5:2;;;30:1;27;20:12;5:2;371:83:12;;;;;;;;;;;;10501:104:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10501:104:1;;;;11410:166;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;11410:166:1;;;;;;;;;132:21:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;132:21:13;;;;;;;;;;;;949:23:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;949:23:1;;;;3602:398:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3602:398:17;;;;;;;;;1189:107:12;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1189:107:12;;;;;;;;;6603:2300:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6603:2300:1;;;;;;;;;1127:87;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1127:87:1;;;;;;;;;;;;;;;;;;9322:1036;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9322:1036:1;;;;;;;;;108:20:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;108:20:13;;;;10609:281:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10609:281:1;;;;;;;;;;;;11270:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;11270:136:1;;;;;;;;;976:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;976:29:1;;;;;;;;;;;;;;;;;;4548:693;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4548:693:1;;;;;;;;;2883:257:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2883:257:17;;;;;;;;;5484:649:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5484:649:1;;;;;;;;;2300:126:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2300:126:17;;;;;;;;;10894:225:1;10934:6;10948:19;11010:6;10981:10;:17;;;;10970:29;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;10970:29:1;;10948:51;;11019:1;11010:10;;11005:92;11026:10;:17;11022:21;;11005:92;;;11071:10;:13;;11082:1;;11071:13;;;;;;;;;;;;;;;;:19;;;11060:5;11066:1;11060:8;;;;;;;;;;;;;;;;;;:30;11045:3;;11005:92;;;-1:-1:-1;11109:5:1;10894:225;-1:-1:-1;10894:225:1:o;86:18:13:-;;;;;;;;;;;;;;;-1:-1:-1;;86:18:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1798:183:17:-;-1:-1:-1;;;;;1885:10:17;1877:19;;1865:4;1877:19;;;-1:-1:-1;1877:19:17;;;;;;;;:29;;;;;;;;;;;;;:38;;;1921;1865:4;;1877:29;:19;1921:38;;;;1877;;1921;;;;;;;;;;-1:-1:-1;1972:4:17;1798:183;;;;;:::o;371:83:12:-;437:12;;371:83;:::o;10501:104:1:-;10583:10;:17;10501:104;:::o;11410:166::-;11514:4;11493:3;-1:-1:-1;;;;;2067:17:1;;;;2059:26;;;;;;2114:4;-1:-1:-1;;;;;2099:20:1;;;;;;;;2091:29;;;;;;11533:38;11552:5;11559:3;11564:6;11533:18;:38::i;:::-;11526:45;11410:166;-1:-1:-1;;;;;11410:166:1:o;132:21:13:-;;;;;;:::o;949:23:1:-;;;;:::o;3602:398:17:-;-1:-1:-1;;;;;3721:10:17;3713:19;;3685:4;3713:19;;;-1:-1:-1;3713:19:17;;;;;;;;:29;;;;;;;;;;;;3752:27;;;3748:164;;;-1:-1:-1;;;;;3797:10:17;3789:19;;3821:1;3789:19;;;-1:-1:-1;3789:19:17;;;;;;;;:29;;;;;;;;;;;:33;3748:164;;;3875:30;:8;3888:16;3875:30;:12;:30;:::i;:::-;-1:-1:-1;;;;;3851:10:17;3843:19;;;;;;-1:-1:-1;3843:19:17;;;;;;;;:29;;;;;;;;;:62;3748:164;-1:-1:-1;;;;;3926:10:17;3917:61;;3948:19;;;;-1:-1:-1;3948:19:17;;;;;;;;3917:61;;;3948:29;;;;;;;;;;;;3917:61;;;;;;;;;;;;;;;;3991:4;3984:11;;3602:398;;;;;;:::o;1189:107:12:-;-1:-1:-1;;;;;1275:16:12;1245:15;1275:16;;;;;;;;;;;;1189:107::o;6603:2300:1:-;6792:12;7184:6;7232:15;7264:18;7486:6;7544:23;7997:22;8601:6;8657:33;6710:8;2212:11;;2200:9;:23;;;;;;;;2199:30;2191:39;;;;;;6734:8;2307:1;2295:13;;2287:22;;;;;;1933:10;-1:-1:-1;;;;;1924:20:1;:8;:20;;;;;;;;;;;6769:8;;-1:-1:-1;;1924:32:1;1916:82;;;;-1:-1:-1;;;;;1916:82:1;;;;;;;;;;;;;;;;;6974:10;:17;6946:25;;:45;6931:136;;;;-1:-1:-1;;;;;6931:136:1;;;;;;;;;7081:25;;7109:1;-1:-1:-1;7073:78:1;;;;-1:-1:-1;;;;;7073:78:1;;;;;;;;;7158:14;7163:8;7158:4;:14::i;:::-;7193:1;7184:10;;7179:1362;7200:10;:17;7196:21;;7179:1362;;;7250:5;7232:23;;7285:53;7308:10;7319:1;7308:13;;;;;;;;;;;;;;;;;;;;:19;;;7329:8;7285:22;:53::i;:::-;7264:74;;7495:1;7486:10;;7481:935;7502:18;:25;7498:1;:29;7481:935;;;7570:18;7589:1;7570:21;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7685:28:1;;;;;;:11;:28;;;;;;;;7570:21;;-1:-1:-1;7685:28:1;;7678:36;;;;;;7811:10;:13;;-1:-1:-1;;;;;7811:41:1;;;:10;7822:1;;7811:13;;;;;;;;;;;;;;;;;;;:22;-1:-1:-1;;;;;7811:22:1;:41;7807:601;;;8022:20;:44;8043:10;8054:1;8043:13;;;;;;;;;;;;;;;;;;;;;;;;;;:22;-1:-1:-1;;;;;8043:22:1;;;8022:44;;;;;;;;;;;;;;;8067:10;8022:56;;;;;;;;;;;-1:-1:-1;8022:67:1;;;;;-1:-1:-1;8108:26:1;;8101:34;;;;8216:13;8148:20;:44;8169:10;8180:1;8169:13;;;;;;;;;;;;;;;;;;;;;;;;;;:22;-1:-1:-1;;;;;8169:22:1;;;8148:44;;;;;;;;;;;;;;;8193:10;8148:56;;;;;;;;;;;:81;;;;;;;;;8314:10;:13;;-1:-1:-1;;8293:20:1;;8169:13;;8325:1;;8314:13;;;;;;;;;;;;;;;;;;;;;;:22;-1:-1:-1;;;;;8314:22:1;;;8293:44;;;;;;;;;;;;;;;8338:10;8293:56;;;;;;;;;;;-1:-1:-1;8293:67:1;;;:74;;-1:-1:-1;;8293:74:1;;;;;;;;;;;-1:-1:-1;;7807:601:1;7529:3;;;;;7481:935;;;8429:10;8428:11;8424:111;;;8464:10;:13;;8475:1;;8464:13;;;;;;;;;;;;;;;;;;;:22;8458:65;;;;;-1:-1:-1;;;;;8464:22:1;;;;8458:38;;:65;;8497:10;;8509:13;;8458:65;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8458:65:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8458:65:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;8458:65:1;;;;;;;;;8451:73;;;;;;7219:3;;;;;7179:1362;;;8610:1;8601:10;;8596:211;8617:18;:25;8613:1;:29;8596:211;;;8693:18;8712:1;8693:21;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8722:47:1;;;8795:5;8722:47;;;:20;:47;;;;;;8770:10;8722:59;;;;;;;;;;;;-1:-1:-1;8722:70:1;;;:78;;-1:-1:-1;;8722:78:1;;;8644:3;;;;;8693:21;-1:-1:-1;8596:211:1;;;8851:8;8839:10;-1:-1:-1;;;;;8818:62:1;;8861:18;8818:62;;;;;;;;;;;;;;;-1:-1:-1;8894:4:1;;6603:2300;-1:-1:-1;;;;;;;;;;;;;6603:2300:1:o;1127:87::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;9322:1036::-;9419:12;9687:6;9735:24;9791:20;9875:21;9469:1;9449:10;:17;:21;9441:61;;;;;;-1:-1:-1;;;;;9441:61:1;;;;;;;;;9516:25;;9544:1;-1:-1:-1;9508:78:1;;;;-1:-1:-1;;;;;9508:78:1;;;;;;;;;9621:25;;9600:17;;:46;9592:83;;;;-1:-1:-1;;;;;9592:83:1;;;;;;;;;9696:1;9687:10;;9682:593;9703:10;:17;9699:1;:21;9682:593;;;9762:18;9781:1;9762:21;;;;;;;;;;;;;;;;;;9735:48;;9814:10;9825:1;9814:13;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9899:38:1;;;;;;;:20;:38;;;;;;9938:10;9899:50;;;;;;;;;;;;:58;9814:13;;-1:-1:-1;9899:58:1;-1:-1:-1;9973:35:1;;;;9965:44;;;;;;10153:37;:16;10174:15;10153:37;:20;:37;:::i;:::-;-1:-1:-1;;;;;10092:38:1;;;;;;;:20;:38;;;;;;;;10131:10;10092:50;;;;;;;;;;;;:98;;;;10206:61;;;;;:32;;:61;;10251:15;;10206:61;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10206:61:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10206:61:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;10206:61:1;;;;;;;;;10199:69;;;;;;9722:3;;;;;9682:593;;;10286:49;;-1:-1:-1;;;;;10304:10:1;10286:49;;;;;;10316:18;;10286:49;;;;;;;;;;10349:4;10342:11;;9322:1036;;;;;;;;;:::o;108:20:13:-;;;;;;;;;;;;;;;-1:-1:-1;;108:20:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10609:281:1;10654:9;10671:35;10752:6;10723:10;:17;;;;10709:32;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;10709:32:1;;10671:70;;10761:1;10752:10;;10747:108;10768:10;:17;10764:21;;10747:108;;;10826:10;:13;;10837:1;;10826:13;;;;;;;;;;;;;;;;;;;:22;10802:21;;-1:-1:-1;;;;;10826:22:1;;;;10802:21;;10821:1;;10802:21;;;;;;-1:-1:-1;;;;;10802:46:1;;;;:21;;;;;;;;;;;:46;-1:-1:-1;10787:3:1;10747:108;;11270:136;11355:4;11334:3;-1:-1:-1;;;;;2067:17:1;;;;2059:26;;;;;;2114:4;-1:-1:-1;;;;;2099:20:1;;;;;;;;2091:29;;;;;;11374:27;11389:3;11394:6;11374:14;:27::i;:::-;11367:34;11270:136;-1:-1:-1;;;;11270:136:1:o;976:29::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;976:29:1;;;;-1:-1:-1;976:29:1;:::o;4548:693::-;4660:12;4840:6;4888:24;4945:17;4993:18;4606:8;2212:11;;2200:9;:23;;;;;;;;2199:30;2191:39;;;;;;4630:8;2307:1;2295:13;;2287:22;;;;;;4849:1;4840:10;;4835:318;4856:10;:17;4852:21;;4835:318;;;4915:10;:13;;4926:1;;4915:13;;;;;;;;;;;;;;;;;;;:22;4965:10;:13;;-1:-1:-1;;;;;4915:22:1;;;;-1:-1:-1;4965:10:1;4976:1;;4965:13;;;;;;;;;;;;;;;;:19;;;4945:39;;5014:46;5037:12;5051:8;5014:22;:46::i;:::-;5076:69;;;;;4993:67;;-1:-1:-1;;;;;;5076:36:1;;;;;:69;;5113:10;;5125:4;;4993:67;;5076:69;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5076:69:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5076:69:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5076:69:1;;;;;;;;;5069:77;;;;;;4875:3;;;;;4835:318;;;5159:14;5164:8;5159:4;:14::i;:::-;5185:33;;5209:8;;5197:10;-1:-1:-1;;;;;5185:33:1;;;;;;;-1:-1:-1;5232:4:1;;4548:693;-1:-1:-1;;;;;;;4548:693:1:o;2883:257:17:-;-1:-1:-1;;;;;3013:10:17;3005:19;;2961:4;3005:19;;;-1:-1:-1;3005:19:17;;;;;;;;:29;;;;;;;;;;;;:46;;3039:11;3005:33;:46::i;:::-;-1:-1:-1;;;;;2981:10:17;2973:19;;;;;;-1:-1:-1;2973:19:17;;;;;;;;:29;;;;;;;;;;;;;;:78;;;3057:61;2973:29;;:19;;3057:61;;;;;;5484:649:1;5636:12;5684:6;5732:24;5789:17;5837:18;5554:8;2212:11;;2200:9;:23;;;;;;;;2199:30;2191:39;;;;;;1933:10;-1:-1:-1;;;;;1924:20:1;:8;:20;;;;;;;;;;;5589:8;;-1:-1:-1;;1924:32:1;1916:82;;;;-1:-1:-1;;;;;1916:82:1;;;;;;;;;5613:8;2307:1;2295:13;;2287:22;;;;;;5658:14;5663:8;5658:4;:14::i;:::-;5693:1;5684:10;;5679:385;5700:10;:17;5696:21;;5679:385;;;5759:10;:13;;5770:1;;5759:13;;;;;;;;;;;;;;;;;;;:22;5809:10;:13;;-1:-1:-1;;;;;5759:22:1;;;;-1:-1:-1;5809:10:1;5820:1;;5809:13;;;;;;;;;;;;;;;;:19;;;5789:39;;5858:46;5881:12;5895:8;5858:22;:46::i;:::-;5997:59;;;;;5837:67;;-1:-1:-1;;;;;;5997:32:1;;;;;:59;;6030:10;;5837:67;;5997:59;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5997:59:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5997:59:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5997:59:1;;;;;;;;;5990:67;;;;;;5719:3;;;;;5679:385;;;6075:35;;6101:8;;6089:10;-1:-1:-1;;;;;6075:35:1;;;;;;;-1:-1:-1;6124:4:1;;5484:649;-1:-1:-1;;;;;;;;5484:649:1:o;2300:126:17:-;-1:-1:-1;;;;;2396:15:17;;;2374:7;2396:15;;;-1:-1:-1;2396:15:17;;;;;;;;:25;;;;;;;;;;;;;2300:126::o;736:439::-;818:4;-1:-1:-1;;;;;838:17:17;;;;830:26;;;;;;-1:-1:-1;;;;;880:15:17;;:8;:15;;;;;;;;;;;870:25;;;862:34;;;;;;-1:-1:-1;;;;;920:14:17;;;;;;;-1:-1:-1;920:14:17;;;;;;;;935:10;920:26;;;;;;;;;;910:36;;;902:45;;;;;;-1:-1:-1;;;;;972:15:17;;:8;:15;;;;;;;;;;;:27;;992:6;972:19;:27::i;:::-;-1:-1:-1;;;;;954:15:17;;;:8;:15;;;;;;;;;;;:45;;;;1021:13;;;;;;;:25;;1039:6;1021:17;:25::i;:::-;-1:-1:-1;;;;;1005:13:17;;;:8;:13;;;;;;;;;;;:41;;;;1081:14;;;;;-1:-1:-1;1081:14:17;;;;;1096:10;1081:26;;;;;;;;;;;:38;;1112:6;1081:30;:38::i;:::-;-1:-1:-1;;;;;1052:14:17;;;;;;;-1:-1:-1;1052:14:17;;;;;;;;1067:10;1052:26;;;;;;;;;;;:67;;;;1125:28;;;;;;1052:14;1125:28;;;;1146:6;;1125:28;;;;;;;;;;-1:-1:-1;1166:4:17;736:439;;;;;;:::o;835:110:10:-;893:7;915:6;;;;908:14;;;;-1:-1:-1;935:5:10;;;835:110::o;12152:153:1:-;12228:10;-1:-1:-1;;;;;12219:20:1;:8;:20;;;;;;;;;;;:34;;12244:8;12219:24;:34::i;:::-;12205:10;-1:-1:-1;;;;;12196:20:1;:8;:20;;;;;;;;;;:57;-1:-1:-1;12274:12:1;:26;;12291:8;12274:16;:26::i;:::-;12259:12;:41;-1:-1:-1;12152:153:1:o;11728:150::-;11811:4;11830:43;11860:12;11830:25;11843:11;;11830:8;:12;;:25;;;;:::i;:::-;:29;:43;:29;:43;:::i;608:379:12:-;671:4;-1:-1:-1;;;;;691:17:12;;;;683:26;;;;;;742:10;-1:-1:-1;;;;;733:20:12;:8;:20;;;;;;;;;;;723:30;;;715:39;;;;;;856:10;-1:-1:-1;;;;;847:20:12;:8;:20;;;;;;;;;;;:32;;872:6;847:24;:32::i;:::-;-1:-1:-1;;;;;833:10:12;824:20;;:8;:20;;;;;;;;;;;:55;;;;901:13;;;;;;;:25;;919:6;901:17;:25::i;:::-;-1:-1:-1;;;;;885:13:12;;;:8;:13;;;;;;;;;;;;:41;;;;932:33;;941:10;932:33;;;;;;;;958:6;;932:33;;11882:266:1;12030:10;-1:-1:-1;;;;;12021:20:1;:8;:20;;;;;;;;;;;:34;;12046:8;12021:24;:34::i;:::-;12007:10;-1:-1:-1;;;;;11998:20:1;:8;:20;;;;;;;;;;:57;-1:-1:-1;12117:12:1;:26;;12134:8;1007:129:10;1065:7;1092:5;;;1110:6;;;;1103:14;;;458:265;516:7;605:9;621:1;617;:5;;;;;;;;;458:265;-1:-1:-1;;;;458:265:10:o;203:173::-;261:7;;280:6;;276:35;;;303:1;296:8;;;;276:35;-1:-1:-1;328:5:10;;;332:1;328;:5;346;;;;;;;;:10;339:18;;;5:118:-1;;72:46;110:6;97:20;72:46;;148:707;;258:4;246:17;;242:27;-1:-1;232:2;;283:1;280;273:12;232:2;320:6;307:20;342:80;357:64;414:6;357:64;;;342:80;;;333:89;;439:5;464:6;457:5;450:21;494:4;486:6;482:17;472:27;;516:4;511:3;507:14;500:21;;569:6;616:3;608:4;600:6;596:17;591:3;587:27;584:36;581:2;;;633:1;630;623:12;581:2;658:1;643:206;668:6;665:1;662:13;643:206;;;726:3;748:37;781:3;769:10;748:37;;;736:50;;-1:-1;809:4;800:14;;;;828;;;;;690:1;683:9;643:206;;881:707;;991:4;979:17;;975:27;-1:-1;965:2;;1016:1;1013;1006:12;965:2;1053:6;1040:20;1075:80;1090:64;1147:6;1090:64;;1075:80;1066:89;;1172:5;1197:6;1190:5;1183:21;1227:4;1219:6;1215:17;1205:27;;1249:4;1244:3;1240:14;1233:21;;1302:6;1349:3;1341:4;1333:6;1329:17;1324:3;1320:27;1317:36;1314:2;;;1366:1;1363;1356:12;1314:2;1391:1;1376:206;1401:6;1398:1;1395:13;1376:206;;;1459:3;1481:37;1514:3;1502:10;1481:37;;;1469:50;;-1:-1;1542:4;1533:14;;;;1561;;;;;1423:1;1416:9;1376:206;;1596:116;;1671:36;1699:6;1693:13;1671:36;;1719:118;;1786:46;1824:6;1811:20;1786:46;;1844:241;;1948:2;1936:9;1927:7;1923:23;1919:32;1916:2;;;1964:1;1961;1954:12;1916:2;1999:1;2016:53;2061:7;2041:9;2016:53;;2092:366;;;2213:2;2201:9;2192:7;2188:23;2184:32;2181:2;;;2229:1;2226;2219:12;2181:2;2264:1;2281:53;2326:7;2306:9;2281:53;;;2271:63;;2243:97;2371:2;2389:53;2434:7;2425:6;2414:9;2410:22;2389:53;;;2379:63;;2350:98;2175:283;;;;;;2465:491;;;;2603:2;2591:9;2582:7;2578:23;2574:32;2571:2;;;2619:1;2616;2609:12;2571:2;2654:1;2671:53;2716:7;2696:9;2671:53;;;2661:63;;2633:97;2761:2;2779:53;2824:7;2815:6;2804:9;2800:22;2779:53;;;2769:63;;2740:98;2869:2;2887:53;2932:7;2923:6;2912:9;2908:22;2887:53;;;2877:63;;2848:98;2565:391;;;;;;2963:366;;;3084:2;3072:9;3063:7;3059:23;3055:32;3052:2;;;3100:1;3097;3090:12;3052:2;3135:1;3152:53;3197:7;3177:9;3152:53;;;3142:63;;3114:97;3242:2;3260:53;3305:7;3296:6;3285:9;3281:22;3260:53;;3336:638;;;3507:2;3495:9;3486:7;3482:23;3478:32;3475:2;;;3523:1;3520;3513:12;3475:2;3558:31;;3609:18;3598:30;;3595:2;;;3641:1;3638;3631:12;3595:2;3661:78;3731:7;3722:6;3711:9;3707:22;3661:78;;;3651:88;;3537:208;3804:2;3793:9;3789:18;3776:32;3828:18;3820:6;3817:30;3814:2;;;3860:1;3857;3850:12;3814:2;3880:78;3950:7;3941:6;3930:9;3926:22;3880:78;;3981:257;;4093:2;4081:9;4072:7;4068:23;4064:32;4061:2;;;4109:1;4106;4099:12;4061:2;4144:1;4161:61;4214:7;4194:9;4161:61;;4245:241;;4349:2;4337:9;4328:7;4324:23;4320:32;4317:2;;;4365:1;4362;4355:12;4317:2;4400:1;4417:53;4462:7;4442:9;4417:53;;4493:502;;;4639:2;4627:9;4618:7;4614:23;4610:32;4607:2;;;4655:1;4652;4645:12;4607:2;4690:1;4707:53;4752:7;4732:9;4707:53;;;4697:63;;4669:97;4825:2;4814:9;4810:18;4797:32;4849:18;4841:6;4838:30;4835:2;;;4881:1;4878;4871:12;4835:2;4901:78;4971:7;4962:6;4951:9;4947:22;4901:78;;5002:110;5075:31;5100:5;5075:31;;;5070:3;5063:44;5057:55;;;5150:590;;5285:54;5333:5;5285:54;;;5357:6;5352:3;5345:19;5381:4;5376:3;5372:14;5365:21;;5426:56;5476:5;5426:56;;;5503:1;5488:230;5513:6;5510:1;5507:13;5488:230;;;5553:53;5602:3;5593:6;5587:13;5553:53;;;5623:60;5676:6;5623:60;;;5706:4;5697:14;;;;;5613:70;-1:-1;5535:1;5528:9;5488:230;;;-1:-1;5731:3;;5264:476;-1:-1;;;;5264:476;5779:590;;5914:54;5962:5;5914:54;;;5986:6;5981:3;5974:19;6010:4;6005:3;6001:14;5994:21;;6055:56;6105:5;6055:56;;;6132:1;6117:230;6142:6;6139:1;6136:13;6117:230;;;6182:53;6231:3;6222:6;6216:13;6182:53;;;6252:60;6305:6;6252:60;;;6335:4;6326:14;;;;;6242:70;-1:-1;6164:1;6157:9;6117:230;;6377:101;6444:28;6466:5;6444:28;;6485:148;6574:53;6621:5;6574:53;;6640:292;;6738:35;6767:5;6738:35;;;6790:6;6785:3;6778:19;6802:63;6858:6;6851:4;6846:3;6842:14;6835:4;6828:5;6824:16;6802:63;;;6897:29;6919:6;6897:29;;;6877:50;;;6890:4;6877:50;;6718:214;-1:-1;;;6718:214;6940:397;7095:2;7083:15;;7132:66;7127:2;7118:12;;7111:88;7233:66;7228:2;7219:12;;7212:88;7328:2;7319:12;;7076:261;7346:397;7501:2;7489:15;;7538:66;7533:2;7524:12;;7517:88;7639:66;7634:2;7625:12;;7618:88;7734:2;7725:12;;7482:261;7752:296;7907:2;7895:15;;7944:66;7939:2;7930:12;;7923:88;8039:2;8030:12;;7888:160;8057:296;8212:2;8200:15;;8249:66;8244:2;8235:12;;8228:88;8344:2;8335:12;;8193:160;8362:397;8517:2;8505:15;;8554:66;8549:2;8540:12;;8533:88;8655:66;8650:2;8641:12;;8634:88;8750:2;8741:12;;8498:261;8768:397;8923:2;8911:15;;8960:66;8955:2;8946:12;;8939:88;9061:66;9056:2;9047:12;;9040:88;9156:2;9147:12;;8904:261;9173:110;9246:31;9271:5;9246:31;;9290:104;9359:29;9382:5;9359:29;;9401:427;9581:2;9566:18;;9595:61;9570:9;9629:6;9595:61;;;9667:78;9741:2;9730:9;9726:18;9717:6;9667:78;;;9756:62;9814:2;9803:9;9799:18;9790:6;9756:62;;9835:294;9971:2;9956:18;;9985:61;9960:9;10019:6;9985:61;;;10057:62;10115:2;10104:9;10100:18;10091:6;10057:62;;10136:341;10294:2;10308:47;;;10279:18;;10369:98;10279:18;10453:6;10369:98;;10484:341;10642:2;10656:47;;;10627:18;;10717:98;10627:18;10801:6;10717:98;;10832:181;10934:2;10919:18;;10948:55;10923:9;10976:6;10948:55;;11020:273;11144:2;11158:47;;;11129:18;;11219:64;11129:18;11269:6;11219:64;;11300:387;11481:2;11495:47;;;11466:18;;11556:121;11466:18;11556:121;;11694:387;11875:2;11889:47;;;11860:18;;11950:121;11860:18;11950:121;;12088:387;12269:2;12283:47;;;12254:18;;12344:121;12254:18;12344:121;;12482:387;12663:2;12677:47;;;12648:18;;12738:121;12648:18;12738:121;;12876:387;13057:2;13071:47;;;13042:18;;13132:121;13042:18;13132:121;;13270:387;13451:2;13465:47;;;13436:18;;13526:121;13436:18;13526:121;;13664:193;13772:2;13757:18;;13786:61;13761:9;13820:6;13786:61;;13864:282;13994:2;13979:18;;14008:61;13983:9;14042:6;14008:61;;;14080:56;14132:2;14121:9;14117:18;14108:6;14080:56;;14153:185;14257:2;14242:18;;14271:57;14246:9;14301:6;14271:57;;14345:256;14407:2;14401:9;14433:17;;;14508:18;14493:34;;14529:22;;;14490:62;14487:2;;;14565:1;14562;14555:12;14487:2;14581;14574:22;14385:216;;-1:-1;14385:216;14608:258;;14767:18;14759:6;14756:30;14753:2;;;14799:1;14796;14789:12;14753:2;-1:-1;14828:4;14816:17;;;14846:15;;14690:176;15140:121;15249:4;15237:17;;15218:43;15402:107;15492:12;;15476:33;15987:128;-1:-1;;;;;16056:54;;16039:76;16122:92;16195:13;16188:21;;16171:43;16221:79;16290:5;16273:27;16307:88;16385:4;16374:16;;16357:38;16722:131;;16817:31;16842:5;16817:31;;16861:268;16926:1;16933:101;16947:6;16944:1;16941:13;16933:101;;;17014:11;;;17008:18;16995:11;;;16988:39;16969:2;16962:10;16933:101;;;17049:6;17046:1;17043:13;17040:2;;;17114:1;17105:6;17100:3;17096:16;17089:27;17040:2;16910:219;;;;;17137:97;17225:2;17205:14;-1:-1;;17201:28;;17185:49",
  "source": "pragma solidity 0.4.23;\npragma experimental ABIEncoderV2;\n\n\nimport \"zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\";\nimport \"zeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport \"zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\";\nimport \"./external/SafeMathUint256.sol\";\nimport \"./lib/Set.sol\";\n\n\n/**\n * @title {Set}\n * @author Felix Feng\n * @dev Implementation of the basic {Set} token.\n */\ncontract SetToken is StandardToken, DetailedERC20(\"\", \"\", 18), Set {\n  using SafeMathUint256 for uint256;\n\n  ///////////////////////////////////////////////////////////\n  /// Data Structures\n  ///////////////////////////////////////////////////////////\n  struct Component {\n    address address_;\n    uint unit_;\n  }\n\n  struct UnredeemedComponent {\n    uint balance;\n    bool isRedeemed;\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// States\n  ///////////////////////////////////////////////////////////\n  uint public naturalUnit;\n  Component[] public components;\n  mapping(address => bool) internal isComponent;\n  // Mapping of token address -> user address -> UnredeemedComponent\n  mapping(address => mapping(address => UnredeemedComponent)) public unredeemedComponents;\n\n\n  ///////////////////////////////////////////////////////////\n  /// Events\n  ///////////////////////////////////////////////////////////\n  event LogPartialRedemption(\n    address indexed _sender,\n    uint indexed _quantity,\n    address[] _excludedComponents\n  );\n\n  event LogRedeemExcluded(\n    address indexed _sender,\n    address[] _components\n  );\n\n  ///////////////////////////////////////////////////////////\n  /// Modifiers\n  ///////////////////////////////////////////////////////////\n  modifier hasSufficientBalance(uint quantity) {\n    // Check that the sender has sufficient components\n    // Since the component length is defined ahead of time, this is not \n    // an unbounded loop\n    require(balances[msg.sender] >= quantity, \"User does not have sufficient balance\");\n    _;\n  }\n\n  modifier validDestination(address _to) {\n    require(_to != address(0));\n    require(_to != address(this));\n    _;\n  }\n\n  modifier isMultipleOfNaturalUnit(uint _quantity) {\n    require((_quantity % naturalUnit) == 0);\n    _;\n  }\n\n  modifier isNonZero(uint _quantity) {\n    require(_quantity > 0);\n    _;\n  }\n\n  /**\n   * @dev Constructor Function for the issuance of an {Set} token\n   * @param _components address[] A list of component address which you want to include\n   * @param _units uint[] A list of quantities in gWei of each component (corresponds to the {Set} of _components)\n   */\n  constructor(address[] _components, uint[] _units, uint _naturalUnit) public {\n    // There must be component present\n    require(_components.length > 0, \"Component length needs to be great than 0\");\n\n    // There must be an array of units\n    require(_units.length > 0, \"Units must be greater than 0\");\n\n    // The number of components must equal the number of units\n    require(_components.length == _units.length, \"Component and unit lengths must be the same\");\n\n    require(_naturalUnit > 0);\n    naturalUnit = _naturalUnit;\n\n    // As looping operations are expensive, checking for duplicates will be\n    // on the onus of the application developer\n\n    // NOTE: It will be the onus of developers to check whether the addressExists\n    // are in fact ERC20 addresses\n    for (uint i = 0; i < _units.length; i++) {\n      // Check that all units are non-zero. Negative numbers will underflow\n      uint currentUnits = _units[i];\n      require(currentUnits > 0, \"Unit declarations must be non-zero\");\n\n      // Check that all addresses are non-zero\n      address currentComponent = _components[i];\n      require(currentComponent != address(0), \"Components must have non-zero address\");\n\n      // add component to isComponent mapping\n      isComponent[currentComponent] = true;\n\n      components.push(Component({\n        address_: currentComponent,\n        unit_: currentUnits  \n      }));\n    }\n  }\n\n  // Prevent Ether from being sent to the contract\n  function () payable {\n    revert();\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// Set Functions\n  ///////////////////////////////////////////////////////////\n\n  /**\n   * @dev Function to convert component into {Set} Tokens\n   *\n   * Please note that the user's ERC20 component must be approved by\n   * their ERC20 contract to transfer their components to this contract.\n   *\n   * @param quantity uint The quantity of component desired to convert in Wei\n   */\n  function issue(uint quantity)\n    isMultipleOfNaturalUnit(quantity)\n    isNonZero(quantity)\n    public returns (bool success) {\n    // Transfers the sender's components to the contract\n    // Since the component length is defined ahead of time, this is not \n    // an unbounded loop\n    for (uint i = 0; i < components.length; i++) {\n      address currentComponent = components[i].address_;\n      uint currentUnits = components[i].unit_;\n\n      uint transferValue = calculateTransferValue(currentUnits, quantity);\n\n      assert(ERC20(currentComponent).transferFrom(msg.sender, this, transferValue));\n    }\n\n    mint(quantity);\n\n    emit LogIssuance(msg.sender, quantity);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to convert {Set} Tokens into underlying components\n   *\n   * The ERC20 components do not need to be approved to call this function\n   *\n   * @param quantity uint The quantity of Sets desired to redeem in Wei\n   */\n  function redeem(uint quantity)\n    public\n    isMultipleOfNaturalUnit(quantity)\n    hasSufficientBalance(quantity)\n    isNonZero(quantity)\n    returns (bool success)\n  {\n    burn(quantity);\n\n    for (uint i = 0; i < components.length; i++) {\n      address currentComponent = components[i].address_;\n      uint currentUnits = components[i].unit_;\n\n      uint transferValue = calculateTransferValue(currentUnits, quantity);\n\n      // The transaction will fail if any of the components fail to transfer\n      assert(ERC20(currentComponent).transfer(msg.sender, transferValue));\n    }\n\n    emit LogRedemption(msg.sender, quantity);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to withdraw a portion of the component tokens of a Set\n   *\n   * This function should be used in the event that a component token has been\n   * paused for transfer temporarily or permanently. This allows users a\n   * method to withdraw tokens in the event that one token has been frozen\n   *\n   * @param quantity uint The quantity of Sets desired to redeem in Wei\n   * @param excludedComponents address[] The list of tokens to exclude\n   */\n  function partialRedeem(uint quantity, address[] excludedComponents)\n    public\n    isMultipleOfNaturalUnit(quantity)\n    isNonZero(quantity)\n    hasSufficientBalance(quantity)\n    returns (bool success)\n  {\n    // Excluded tokens should be less than the number of components\n    // Otherwise, use the normal redeem function\n    require(\n      excludedComponents.length < components.length,\n      \"Excluded component length must be less than component length\"\n    );\n    require(excludedComponents.length > 0, \"Excluded components must be non-zero\");\n\n    burn(quantity);\n\n    for (uint i = 0; i < components.length; i++) {\n      bool isExcluded = false;\n\n      uint transferValue = calculateTransferValue(components[i].unit_, quantity);\n\n      // This is unideal to do a doubly nested loop, but the number of excludedComponents\n      // should generally be a small number\n      for (uint j = 0; j < excludedComponents.length; j++) {\n        address currentExcluded = excludedComponents[j];\n\n        // Check that excluded token is indeed a component in this contract\n        assert(isComponent[currentExcluded]);\n\n        // If the token is excluded, add to the user's unredeemed component value\n        if (components[i].address_ == currentExcluded) {\n          // Check whether component is already redeemed; Ensures duplicate excludedComponents\n          // has not been inputted.\n          bool currentIsRedeemed = unredeemedComponents[components[i].address_][msg.sender].isRedeemed;\n          assert(currentIsRedeemed == false);\n\n          unredeemedComponents[components[i].address_][msg.sender].balance += transferValue;\n\n          // Mark redeemed to ensure no duplicates\n          unredeemedComponents[components[i].address_][msg.sender].isRedeemed = true;\n\n          isExcluded = true;\n        }\n      }\n\n      if (!isExcluded) {\n        assert(ERC20(components[i].address_).transfer(msg.sender, transferValue));  \n      }\n    }\n\n    // Mark all excluded components not redeemed\n    for (uint k = 0; k < excludedComponents.length; k++) {\n      address currentExcludedToUnredeem = excludedComponents[k];\n      unredeemedComponents[currentExcludedToUnredeem][msg.sender].isRedeemed = false;\n    }\n\n    emit LogPartialRedemption(msg.sender, quantity, excludedComponents);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to withdraw tokens that have previously been excluded when calling\n   * the redeemExcluded method\n   *\n   * This function should be used to retrieve tokens that have previously excluded\n   * when calling the redeemExcluded function.\n   *\n   * @param componentsToRedeem address[] The list of tokens to redeem\n   * @param quantities uint[] The quantity of Sets desired to redeem in Wei\n   */\n  function redeemExcluded(address[] componentsToRedeem, uint[] quantities)\n    public\n    returns (bool success)\n  {\n    require(quantities.length > 0, \"Quantities must be non-zero\");\n    require(componentsToRedeem.length > 0, \"Components redeemed must be non-zero\");\n    require(quantities.length == componentsToRedeem.length, \"Lengths must be the same\");\n\n    for (uint i = 0; i < quantities.length; i++) {\n      address currentComponent = componentsToRedeem[i];\n      uint currentQuantity = quantities[i];\n\n      // Check there is enough balance\n      uint remainingBalance = unredeemedComponents[currentComponent][msg.sender].balance;\n      require(remainingBalance >= currentQuantity);\n\n      // To prevent re-entrancy attacks, decrement the user's Set balance\n      unredeemedComponents[currentComponent][msg.sender].balance = remainingBalance.sub(currentQuantity);\n\n      assert(ERC20(currentComponent).transfer(msg.sender, currentQuantity));\n    }\n\n    emit LogRedeemExcluded(msg.sender, componentsToRedeem);\n\n    return true;\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// Getters\n  ///////////////////////////////////////////////////////////\n\n  function componentCount() public view returns(uint componentsLength) {\n    return components.length;\n  }\n\n  function getComponents() public view returns(address[]) {\n    address[] memory componentAddresses = new address[](components.length);\n    for (uint i = 0; i < components.length; i++) {\n        componentAddresses[i] = components[i].address_;\n    }\n    return componentAddresses;\n  }\n\n  function getUnits() public view returns(uint[]) {\n    uint[] memory units = new uint[](components.length);\n    for (uint i = 0; i < components.length; i++) {\n        units[i] = components[i].unit_;\n    }\n    return units;\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// Transfer Updates\n  ///////////////////////////////////////////////////////////\n  function transfer(address _to, uint256 _value) validDestination(_to) public returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) validDestination(_to) public returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  ///////////////////////////////////////////////////////////\n  /// Private Function\n  ///////////////////////////////////////////////////////////\n\n  function calculateTransferValue(uint currentUnits, uint quantity) internal returns(uint) {\n    return quantity.div(naturalUnit).mul(currentUnits);\n  }\n\n  function mint(uint quantity) internal {\n    // If successful, increment the balance of the user’s {Set} token\n    balances[msg.sender] = balances[msg.sender].add(quantity);\n\n    // Increment the total token supply\n    totalSupply_ = totalSupply_.add(quantity);\n  }\n\n  function burn(uint quantity) internal {\n    balances[msg.sender] = balances[msg.sender].sub(quantity);\n    totalSupply_ = totalSupply_.sub(quantity);\n  }\n}\n",
  "sourcePath": "/Users/felixfeng/Dapps/set-protocol-contracts/contracts/SetToken.sol",
  "networks": {},
  "schemaVersion": "1.0.0",
  "updatedAt": "2018-05-01T02:39:27.381Z"
}